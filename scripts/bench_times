#!/bin/bash
# above due IFS 
# Andrey Zakharov 2010-03-01 <admin@vaultsoft.ru>
# benchmark the command
# export TIME
# uses "aver.awk" - awk script average columns
# Usage:
#   bench_times testcase1.txt                   : will perform cmds from file
#   bash ./test_case.2 1 | ../bench_times -     : if test case is dynamic generated by script
#   ITERATE=10000 bash ./test_case.3 | bash -x ../bench_times -

LOG=./BENCHMARK-$$.csv
AVERAGE_AWK_SCRIPT=`dirname $0`/aver.awk
# Serious
REST_TIME=${RESTTIME:-5}             # in sec (5-60), to reduce influence from previous test
MAXTEST=${NUMTEST:-5}               # to reduce error, do cmd multiple times
# Quick 
#ITERATE=100
#REST_TIME=0
#MAXTEST=2

# test case
CMD=$1
[ -z "$CMD" ] && echo "Usage: $0 test_case.file" && exit 1

# env TIME can not be in subshell
TIME_FORMAT='%e,\t%U,\t%S,\t%P,\t%c,\t%I,\t%O\t%M' #for csv

BTIME=$( which time )
$BTIME --version
BTIME="$BTIME --format=$TIME_FORMAT --output=$LOG --append -- "



(
    cat "$CMD"
) | while read ccmd; do
    if [ x"${ccmd:0:1}" = x"#" ]; then continue; fi
#    ccmd=$( eval echo "$ccmd" )
    echo "======> BENCHING $ccmd"

    echo $ccmd >> $LOG
    #format tip
    echo -e "#,\telap,\tuser,\tsys,\tproc,\tcxsw,\tinput,\toutput,\tmaxres" >> $LOG
    #todo axis
    #IFS=$oldifs
    for j in $( seq $MAXTEST -1 1 ); do
        echo "Remain $j times!"
        echo -ne "$j,\t" >> $LOG
    # prepare, make external-clean clean >/dev/null
    # bench cmd: $BTIME make MVNOPTS=--offline BJAM_OPTS=-j$j -j$j all
        $BTIME $ccmd
        echo "Get a rest..."
        sleep $REST_TIME
    done
done


[ -r "$AVERAGE_AWK_SCRIPT" ] && ( awk -f $AVERAGE_AWK_SCRIPT $LOG && which playsound && playsound /usr/share/sounds/pop.wav ) || \
    cat $LOG

